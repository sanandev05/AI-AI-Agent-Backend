using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using AI_AI_Agent.Application.Agent;

namespace AI_AI_Agent.Infrastructure.Tools;

public sealed class TextFileWriteTool : ITool
{
    public string Name => "TextFileWrite";
    public string Description => "Create a .txt file with provided content in the workspace and return a download link.";
    public object JsonSchema => new
    {
        type = "object",
        properties = new
        {
            fileName = new { type = "string", description = "Defaults to autogenerated .txt name" },
            content = new { type = "string" }
        },
        required = new[] { "content" }
    };

    public Task<object> InvokeAsync(JsonElement args, CancellationToken ct)
    {
        var dir = Path.Combine(AppContext.BaseDirectory, "workspace");
        Directory.CreateDirectory(dir);
        var fileName = args.TryGetProperty("fileName", out var fn) && fn.ValueKind == JsonValueKind.String ? fn.GetString() : null;
        if (string.IsNullOrWhiteSpace(fileName)) fileName = $"note_{DateTimeOffset.UtcNow:yyyyMMdd_HHmmss}.txt";
        var content = args.TryGetProperty("content", out var c) && c.ValueKind == JsonValueKind.String ? c.GetString() ?? string.Empty : string.Empty;
        var path = Path.Combine(dir, fileName!);
        File.WriteAllText(path, content);
        return Task.FromResult<object>(new { fileName, path, downloadUrl = $"/api/files/{fileName}", message = "TXT created" });
    }
}
